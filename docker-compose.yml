version: "3.8"

services:
  db:
    image: postgres:16-alpine
    container_name: auth_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: meteor906587
      POSTGRES_DB: sneaker_shop_auth
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: backend/auth_service/Dockerfile
    container_name: auth_service
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:meteor906587@db:5432/sneaker_shop_auth
    command: ["python", "-m", "uvicorn", "backend.auth_service.auth_service.main:app", "--host", "0.0.0.0", "--port", "8000"]
    restart: unless-stopped

  alembic:
    build:
      context: .
      dockerfile: backend/auth_service/Dockerfile
    container_name: alembic_migrations
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:meteor906587@db:5432/sneaker_shop_auth
    # Устанавливаем entrypoint, который запускает alembic с нужным конфигурационным файлом
    entrypoint: ["poetry", "run", "alembic", "-c", "backend/auth_service/alembic.ini"]
    # Монтируем корень проекта, чтобы изменения в миграциях были видны на хосте
    volumes:
      - .:/app
    # Не задаём фиксированную команду — она будет переопределяться при запуске
    command: [ "poetry", "run", "alembic", "-c", "backend/auth_service/alembic.ini", "upgrade", "head" ]

volumes:
  pgdata:
