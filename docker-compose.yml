services:
  auth_db:
    image: postgres:16-alpine
    container_name: auth_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: meteor906587
      POSTGRES_DB: sneaker_shop_auth
    volumes:
      - auth_pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  favorite_db:
    image: postgres:16-alpine
    container_name: favorite_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: meteor906587
      POSTGRES_DB: sneaker_shop_favorite
    volumes:
      - favorite_pgdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  cart_db:
    image: postgres:16-alpine
    container_name: cart_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: meteor906587
      POSTGRES_DB: sneaker_shop_cart
    volumes:
      - cart_pgdata:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  catalog_db:
    image: postgres:16-alpine
    container_name: catalog_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: meteor906587
      POSTGRES_DB: sneaker_shop_catalog
    volumes:
      - catalog_pgdata:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  auth_service:
    build:
      context: ./backend/auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    depends_on:
      auth_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./backend/secrets:/app/secrets
      - ./kafka:/app/auth_service/kafka
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://postgres:meteor906587@auth_db:5432/sneaker_shop_auth
    working_dir: /app/auth_service
    command: [ "python", "-m", "uvicorn", "auth_service.main:app", "--host", "0.0.0.0", "--port", "8004" ]
    restart: unless-stopped

  auth_alembic:
    build:
      context: ./backend/auth_service
      dockerfile: Dockerfile
    container_name: auth_alembic_migrations
    depends_on:
      auth_db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:meteor906587@auth_db:5432/sneaker_shop_auth
    working_dir: /app/auth_service
    entrypoint: [ "poetry", "run", "alembic", "-c", "alembic.ini" ]
    volumes:
      - ./backend/auth_service:/app/auth_service
      - ./backend/secrets:/app/secrets
      - ./kafka:/app/auth_service/kafka
    command: [ "upgrade", "head" ]

# TODO: заменить с 5432 бд на другой свободный сервис, так как он занят auth_db и в alembic тоже
  favorite_service:
    build:
      context: ./backend/favorite_service
      dockerfile: Dockerfile
    container_name: favorite_service
    depends_on:
      favorite_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./kafka:/app/favorite_service/kafka
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://postgres:meteor906587@favorite_db:5432/sneaker_shop_favorite
    working_dir: /app/favorite_service
    command: [ "python", "-m", "uvicorn", "favorite_service.main:app", "--host", "0.0.0.0", "--port", "8005" ]
    restart: unless-stopped

  favorite_alembic:
    build:
      context: ./backend/favorite_service
      dockerfile: Dockerfile
    container_name: favorite_alembic_migrations
    depends_on:
      favorite_db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:meteor906587@favorite_db:5432/sneaker_shop_favorite
    working_dir: /app/favorite_service
    entrypoint: [ "poetry", "run", "alembic", "-c", "alembic.ini" ]
    volumes:
      - ./backend/favorite_service:/app/favorite_service
    command: [ "upgrade", "head" ]

  cart_service:
    build:
      context: ./backend/cart_service
      dockerfile: Dockerfile
    container_name: cart_service
    depends_on:
      cart_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./kafka:/app/cart_service/kafka
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://postgres:meteor906587@cart_db:5432/sneaker_shop_cart
    working_dir: /app/cart_service
    command: [ "python", "-m", "uvicorn", "cart_service.main:app", "--host", "0.0.0.0", "--port", "8002" ]
    restart: unless-stopped

  cart_alembic:
    build:
      context: ./backend/cart_service
      dockerfile: Dockerfile
    container_name: cart_alembic_migrations
    depends_on:
      cart_db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:meteor906587@cart_db:5432/sneaker_shop_cart
    working_dir: /app/cart_service
    entrypoint: [ "poetry", "run", "alembic", "-c", "alembic.ini" ]
    volumes:
      - ./backend/cart_service:/app/cart_service
    command: [ "upgrade", "head" ]

  catalog_service:
    build:
      context: ./backend/catalog_service
      dockerfile: Dockerfile
    container_name: catalog_service
    depends_on:
      catalog_db:
        condition: service_healthy
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://postgres:meteor906587@catalog_db:5432/sneaker_shop_catalog
    command: [ "python", "-m", "uvicorn", "catalog_service.main:app", "--host", "0.0.0.0", "--port", "8003" ]
    restart: unless-stopped

  catalog_alembic:
    build:
      context: ./backend/catalog_service
      dockerfile: Dockerfile
    container_name: catalog_alembic_migrations
    depends_on:
      catalog_db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:meteor906587@catalog_db:5432/sneaker_shop_catalog
    working_dir: /app/catalog_service
    entrypoint: [ "poetry", "run", "alembic", "-c", "alembic.ini" ]
    volumes:
      - ./backend/catalog_service:/app/catalog_service
    command: [ "upgrade", "head" ]

  kong-database:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U kong" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kong:
    image: kong:latest
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong

      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
    ports:
      - "8000:8000"   # для входящих HTTP-запросов (Proxy)
      - "8443:8443"   # для входящих HTTPS-запросов (Proxy)
      - "8001:8001"   # для Admin API (HTTP)
      - "8444:8444"   # для Admin API (HTTPS)
    command: >
      sh -c "kong migrations bootstrap && kong start"

  nginx:
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d

  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka-kraft

    ports:
      - "9092:9092"   # клиенты (produce/fetch)
      - "9093:9093"   # внутренняя связь контроллера

    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_KRAFT_CLUSTER_ID: "01234567-89ab-cdef-0123-456789abcdef"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka-kraft:9093"

      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"

      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1

    healthcheck:
      test: [
        "CMD-SHELL",
        "/opt/bitnami/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"
      ]
      interval: 10s
      timeout: 5s
      retries: 5

    volumes:
      - kafka-data:/bitnami/kafka



volumes:
  auth_pgdata:
  favorite_pgdata:
  cart_pgdata:
  catalog_pgdata:
  kong-data:
  kafka-data:
